#! /usr/bin/env python
from __future__ import division

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32
from sensor_msgs.msg import Image
# import gopro_ros.gopro as gopro
from gopro_ros import gopro


from cv_bridge import CvBridge
class ControllerNode:

    def __init__(self):
        # self.buffer = []
        self.controller = gopro.Webcam("606")

        self.bridge = CvBridge()
        # image_message = 

    def main(self):
        self.portPub = rospy.Publisher('port',
                                       Int32, queue_size=1)

        rospy.init_node('gopro_ros')
        self.nodeName = rospy.get_name()
        rospy.loginfo("{0} started".format(self.nodeName))

        # rospy.Subscriber("cmd_vel", Twist, self.twistCallback)

        self.rate = float(rospy.get_param('~rate', 10.0))
        self.timeout = float(rospy.get_param('~timeout', 0.2))
        self.port = int(rospy.get_param('~port',8555))
        self.resolution = int(rospy.get_param('~resolution',12))
        self.fov = int(rospy.get_param('~fov',0))
        # self.controller.enable()
        self.controller.enable()
        self.controller.start()
        rospy.loginfo("Enabled stream")
        rate = rospy.Rate(self.rate)
        self.lastPublishTime = rospy.get_time()
        
        while not rospy.is_shutdown():
            self.publish()
            rate.sleep()
        self.controller.stop()
        self.controller.disable()

    def publish(self):
        if (rospy.get_time() - self.lastPublishTime > self.timeout):
            self.portPub.publish(self.port)
            self.lastPublishTime = rospy.get_time()
   
if __name__ == '__main__':
    try:
        node = ControllerNode()
        node.main()
    except rospy.ROSInterruptException:
        pass
